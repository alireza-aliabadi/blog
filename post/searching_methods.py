from django.contrib.postgres.search import SearchVector, SearchQuery, SearchRank, TrigramSimilarity# ---regular search by search vector---def regular_search(obj, query):    result = obj.annotate(search=SearchVector('title', 'text')).filter(search=query)    return result# ---stemming and ranking results---def stemming_ranking(obj, query):    search_query = query    search_vector = SearchVector('title', 'text')    result = obj.annotate(search=search_vector, rank=SearchRank(search_vector, search_query)). \        filter(search=search_query).order_by('-rank')    return result# ---weighting query---def weighting(obj, query):    search_query = query    search_vector = SearchVector('title', weight='A') + SearchVector('text', weight='B')    result = obj.annotate(rank=SearchRank(search_vector, search_query)).filter(rank__gte=0.3). \        order_by('-rank')    return result# ---search with trigram---def trigram_search(obj, query):    result = obj.annotate(similarity=TrigramSimilarity('title', query),).filter(        similarity__gt=0.1).order_by('-similarity')    return result